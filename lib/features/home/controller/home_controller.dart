import 'dart:developer';
import 'dart:io';

import 'package:device_info_plus/device_info_plus.dart';
import 'package:flutter/cupertino.dart';
import 'package:get/get.dart';
import 'package:pull_to_refresh/pull_to_refresh.dart';
import 'package:scan_qr/core/resources/export_resources.dart';
import 'package:scan_qr/features/scan/model/scan_code_result_model.dart';
import 'package:share_plus/share_plus.dart';

import '../../../core/widgets/export_custom_widget.dart';

class HomeController extends GetxController {
  String platformVersion = 'Unknown';
  int? visibleIndex;
  final SecureStorageService secureStorageService = SecureStorageService();
  final RefreshController refreshController = RefreshController();
  List<ScannedCodeResultModel> historyList = [];
  List<ScannedCodeResultModel> searchedList = [];
  final searchController = TextEditingController();
  @override
  @override
  void onInit() {
    super.onInit();
    getDeviceInfo();
    loadHistory();
  }

  Future<void> loadHistory() async {
    await fetchAllHistory();
    if (searchController.text.isNotEmpty) filterHistory(searchController.text);
    update();
  }

  filterHistory(String query) {
    searchedList = historyList.where((element) => element.displayValue!.contains(query)).toList();
    update();
  }

  searchActionMethod() {
    searchController.clear();
    searchedList.clear();
    update();
  }

  Future<void> getDeviceInfo() async {
    DeviceInfoPlugin deviceInfo = DeviceInfoPlugin();

    if (Platform.isAndroid) {
      AndroidDeviceInfo androidInfo = await deviceInfo.androidInfo;
      platformVersion = androidInfo.model;
    } else {
      IosDeviceInfo iosInfo = await deviceInfo.iosInfo;
      platformVersion = iosInfo.utsname.machine;
    }
    update();
  }

  void changeVisibility(int index) {
    if (visibleIndex == index) {
      visibleIndex = null;
    } else {
      visibleIndex = index;
    }
    update();
  }

  // All History
  List<ScannedCodeResultModel> qrHistory = [];
  fetchAllHistory() async {
    try {
      final wifiData = await secureStorageService.getScannedValue();
      qrHistory = wifiData.reversed.toList();
      historyList = qrHistory;

      historyList.sort((a, b) {
        final aTime = a.timestamp ?? DateTime.fromMillisecondsSinceEpoch(0);
        final bTime = b.timestamp ?? DateTime.fromMillisecondsSinceEpoch(0);
        return bTime.compareTo(aTime);
      });
    } catch (e) {
      log("Error fetching Wifi history: $e");
      qrHistory = [];
      historyList = qrHistory;
    }
    update();
  }

  deleteQRData({
    String? ssid,
    String? url,
    bool all = false,
    String? contactNumber,
    String? email,
    String? sms,
    String? phone,
    double? geo,
    String? calendarEvent,
    String? barcode,
  }) async {
    if (all) {
      await secureStorageService.deleteQrData();
      await loadHistory();
    } else {
      await secureStorageService.deleteIndividualQrData(
        (ssid ?? url ?? contactNumber ?? email ?? sms ?? phone ?? geo ?? calendarEvent ?? barcode)
            .toString(),
      );
      loadHistory();
    }

    update();
  }

  GlobalKey qrKey = GlobalKey();
  Future<void> shareQr(GlobalKey qrkey, {String? text, String? subject, String? title}) async {
    final filePath = await shareScannedValueFromBytes(qrkey);
    await shareFunction(
      text: text ?? 'Shared from ScanQR',
      title: title,
      subject: subject ?? 'QR code generated by ScanQR',
      thummbnailPath: XFile(filePath),
      files: [XFile(filePath)],
    );
  }

  @override
  void dispose() {
    super.dispose();
    qrKey = GlobalKey();
  }
}
