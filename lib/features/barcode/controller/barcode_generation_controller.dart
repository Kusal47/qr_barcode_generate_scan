import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:mobile_scanner/mobile_scanner.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:share_plus/share_plus.dart';

import '../../../core/resources/export_resources.dart';
import '../../../core/widgets/export_common_widget.dart';
import '../../../core/widgets/export_custom_widget.dart';
import '../model/barcode_generate_params.dart';

import 'dart:typed_data';
import 'package:barcode/barcode.dart' as bcode;

class BarcodeGenerationController extends GetxController {
  // 1️⃣ Linear Barcodes (Text-based)
  final TextEditingController code128Controller = TextEditingController();
  final TextEditingController code39Controller = TextEditingController();
  final TextEditingController code93Controller = TextEditingController();
  final TextEditingController codabarController = TextEditingController();
  final TextEditingController itfController = TextEditingController();

  // 2️⃣ 2D Barcodes
  final TextEditingController dataMatrixController = TextEditingController();
  final TextEditingController pdf417Controller = TextEditingController();
  final TextEditingController aztecController = TextEditingController();

  // 3️⃣ Numeric Barcodes (with length restrictions)
  final TextEditingController ean13Controller = TextEditingController(); // 12 digits input
  final TextEditingController ean8Controller = TextEditingController(); // 7 digits input
  final TextEditingController upcAController = TextEditingController(); // 12 digits input
  final TextEditingController upcEController = TextEditingController(); // 8 digits input

  BarcodeGenerateParams? barcodeGenerateParams = BarcodeGenerateParams();
  String barcodeData = "";

  final GlobalKey qrKey = GlobalKey();
  final formKey = GlobalKey<FormState>();

  @override
  void onInit() {
    super.onInit();
    storagePermissionHandler();
  }

  storagePermissionHandler() async {
    if (await Permission.storage.isGranted == true) return;
    var status = await Permission.storage.request();
    if (!status.isGranted) {
      throw Exception("Storage permission not granted");
    }
  }

  generateQr(BarcodeGenerateParams barcodeGenerateParams) async {
    barcodeData = barcodeGenerateParams.generateBarcodeString().toString();
    update();
  }

  downLoadQr() async {
    await captureAndSaveWidget(qrKey).then((value) {
      showSuccessToast("Image Downloaded!");
      openDownloadedFile(value);
    });
  }

  Future<void> shareQr(GlobalKey qrkey, {String? text}) async {
    final filePath = await shareQrFromBytes(qrkey);
    await shareFunction(
      text: text ?? 'Shared from ScanQR',
      subject: 'QR code generated by ScanQR',
      thummbnailPath: XFile(filePath),
      files: [XFile(filePath)],
    );
  }

  String isSelected = "";
  void toggleSelected(String name) {
    if (isSelected == name) {
      isSelected = "";
    } else {
      isSelected = name;
    }
    barcodeData = "";
    update();
  }

  Future<Uint8List> generateBarcodeImage(
    String data,
    BarcodeFormat format,
    SizeConfig sizeConfig,
  ) async {
    // Map your BarcodeFormat to the 'barcode' package type
    bcode.Barcode bc;
    switch (format) {
      case BarcodeFormat.code128:
        bc = bcode.Barcode.code128();
        break;
      case BarcodeFormat.code39:
        bc = bcode.Barcode.code39();
        break;
      case BarcodeFormat.ean13:
        bc = bcode.Barcode.ean13();
        break;
      case BarcodeFormat.ean8:
        bc = bcode.Barcode.ean8();
        break;
      case BarcodeFormat.upcA:
        bc = bcode.Barcode.upcA();
        break;
      case BarcodeFormat.upcE:
        bc = bcode.Barcode.upcE();
        break;
      case BarcodeFormat.itf:
        bc = bcode.Barcode.itf();
        break;
      case BarcodeFormat.pdf417:
        bc = bcode.Barcode.pdf417();
        break;
      case BarcodeFormat.aztec:
        bc = bcode.Barcode.aztec();
        break;

      case BarcodeFormat.code93:
        bc = bcode.Barcode.code93();
        break;
      case BarcodeFormat.codabar:
        bc = bcode.Barcode.codabar();
        break;
      case BarcodeFormat.dataMatrix:
        bc = bcode.Barcode.dataMatrix();
        break;
      default:
        bc = bcode.Barcode.code128();
    }

    final svg = bc.toSvg(data, width: sizeConfig.appWidth(80), height: sizeConfig.appHeight(15));

    return Uint8List.fromList(svg.codeUnits);
  }

  @override
  void dispose() {
    super.dispose();
    code128Controller.dispose();
    code39Controller.dispose();
    code93Controller.dispose();
    codabarController.dispose();
    itfController.dispose();
    dataMatrixController.dispose();
    pdf417Controller.dispose();
    aztecController.dispose();
    ean13Controller.dispose();
    ean8Controller.dispose();
    upcAController.dispose();
    upcEController.dispose();
  }
}
