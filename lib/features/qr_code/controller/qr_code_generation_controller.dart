import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:scan_qr/core/widgets/common/toast.dart';
import 'package:share_plus/share_plus.dart';

import '../../../core/resources/export_resources.dart';
import '../../../core/widgets/export_common_widget.dart';
import '../../../core/widgets/export_custom_widget.dart';
import '../model/qr_generate_params.dart';

class QrCodeGenerationController extends GetxController {
  final TextEditingController urlcontroller = TextEditingController();
  final TextEditingController wifiNamecontroller = TextEditingController();
  final TextEditingController wifiPasswordcontroller = TextEditingController();
  final TextEditingController contactNamecontroller = TextEditingController();
  final TextEditingController contactNumbercontroller = TextEditingController();
  final TextEditingController contactEmailcontroller = TextEditingController();
  final TextEditingController contactAddresscontroller = TextEditingController();
  final TextEditingController textController = TextEditingController();
  final TextEditingController typeController = TextEditingController();

  // üìß Email
  final emailAddressController = TextEditingController();
  final emailSubjectController = TextEditingController();
  final emailBodyController = TextEditingController();

  // üí¨ SMS
  final smsNumberController = TextEditingController();
  final smsMessageController = TextEditingController();

  // ‚òé Phone
  final phoneNumberController = TextEditingController();

  // üìç Geo
  final latitudeController = TextEditingController();
  final longitudeController = TextEditingController();

  // üìÖ Calendar Event
  final eventTitleController = TextEditingController();
  final eventDescriptionController = TextEditingController();
  final eventLocationController = TextEditingController();
  final eventStartController = TextEditingController();
  final eventEndController = TextEditingController();
  QRGenerateParams? qrGenerateParams = QRGenerateParams();
  String qrData = "";

  final GlobalKey qrKey = GlobalKey();
  final formKey = GlobalKey<FormState>();


  @override
  void onInit() {
    super.onInit();
    storagePermissionHandler();
  }

  storagePermissionHandler() async {
    var status = await Permission.storage.request();
    if (!status.isGranted) {
      throw Exception("Storage permission not granted");
    }
  }

  generateQr(QRGenerateParams qrGenerateParams) async {
    qrData = qrGenerateParams.generateQrString().toString();
    update();
  }

  downLoadQr() async {
    await captureAndSaveWidget(qrKey).then((value) {
      showSuccessToast("Image Downloaded!");
      openDownloadedFile(value);
    });
  }

  Future<void> shareQr(GlobalKey qrkey, {String? text}) async {
    final filePath = await shareQrFromBytes(qrkey);
    await shareFunction(
      text: text ?? 'Shared from ScanQR',
      subject: 'QR code generated by ScanQR',
      thummbnailPath: XFile(filePath),
      files: [XFile(filePath)],
    );
  }

  String isSelected = "";
  void toggleSelected(String name) {
    if (isSelected == name) {
      isSelected = "";
    } else {
      isSelected = name;
    }
    qrData = "";
    update();
  }

  Future<void> eventDatePicker({bool isStart = false}) async {
    final DateTime? pickedDate = await datePicker(Get.context!);

    if (pickedDate != null) {
      final TimeOfDay? pickedTime = await timePicker(Get.context!);

      if (pickedTime != null) {
        // Combine date + time
        final DateTime finalDateTime = DateTime(
          pickedDate.year,
          pickedDate.month,
          pickedDate.day,
          pickedTime.hour,
          pickedTime.minute,
        );

        // Save to params
        if (isStart) {
          qrGenerateParams!.eventStart = finalDateTime;
          eventStartController.text = formatDateTime(finalDateTime, dateTimeOnly: true);
        } else {
          qrGenerateParams!.eventEnd = finalDateTime;
          eventEndController.text = formatDateTime(finalDateTime, dateTimeOnly: true);
        }

        update();
      }
    }
  }

  @override
  void dispose() {
    super.dispose();
    // URL
    urlcontroller.dispose();

    // WiFi
    typeController.dispose();
    wifiNamecontroller.dispose();
    wifiPasswordcontroller.dispose();

    // Contact Info
    contactNamecontroller.dispose();
    contactNumbercontroller.dispose();
    contactEmailcontroller.dispose();
    contactAddresscontroller.dispose();

    // Email
    emailAddressController.dispose();
    emailSubjectController.dispose();
    emailBodyController.dispose();

    // SMS
    smsNumberController.dispose();
    smsMessageController.dispose();

    // Phone
    phoneNumberController.dispose();

    // Geo
    latitudeController.dispose();
    longitudeController.dispose();

    // Calendar
    eventTitleController.dispose();
    eventDescriptionController.dispose();
    eventLocationController.dispose();
    eventStartController.dispose();
    eventEndController.dispose();
  }
}
