import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:mobile_scanner/mobile_scanner.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:share_plus/share_plus.dart';

import '../../../../core/resources/export_resources.dart';
import '../../../../core/widgets/export_common_widget.dart';
import '../../../../core/widgets/export_custom_widget.dart';
import '../../../home/controller/home_controller.dart';
import '../../model/scan_code_result_model.dart';
import '../model/barcode_generate_params.dart';

import 'dart:typed_data';
import 'package:barcode/barcode.dart' as bcode;

class BarcodeGenerationController extends GetxController {
  BarcodeGenerateParams? barcodeGenerateParams = BarcodeGenerateParams();
  String barcodeData = "";

  final GlobalKey qrKey = GlobalKey();
  final formKey = GlobalKey<FormState>();

  @override
  void onInit() {
    super.onInit();
    storagePermissionHandler();
  }

  storagePermissionHandler() async {
    if (await Permission.storage.isGranted == true) return;
    var status = await Permission.storage.request();
    if (!status.isGranted) {
      throw Exception("Storage permission not granted");
    }
  }

  final SecureStorageService secureStorageService = SecureStorageService();
  generateBarcode(BarcodeGenerateParams barcodeGenerateParams) async {
    barcodeData = barcodeGenerateParams.generateBarcodeString().toString();
    final saveQRData = ScannedCodeResultModel(
      displayValue: barcodeData,
      rawValue: barcodeData,
      wifi: null,
      url: null,
      calendarEvent: null,
      contactInfo: null,
      email: null,
      phone: null,
      sms: null,
      geo: null,
      ssid: null,
      password: null,
      format: barcodeGenerateParams.format,
      timestamp: DateTime.now(),
      isBarcode: true,
    );
    await secureStorageService.saveScannedValue(saveQRData);
    Get.find<HomeController>().loadHistory();

    update();
  }

  downLoadQr() async {
    await captureAndSaveWidget(qrKey).then((value) {
      showSuccessToast("Image Downloaded!");
      openDownloadedFile(value);
    });
  }

  Future<void> shareQr(GlobalKey qrkey, {String? text}) async {
    final filePath = await shareScannedValueFromBytes(qrkey);
    await shareFunction(
      text: text ?? 'Shared from Codova',
      subject: 'Barcode generated by Codova',
      thummbnailPath: XFile(filePath),
      files: [XFile(filePath)],
    );
  }

  String isSelected = "";
  void toggleSelected(String name) {
    if (isSelected == name) {
      isSelected = "";
    } else {
      isSelected = name;
    }
    barcodeData = "";
    formKey.currentState?.reset();

    update();
  }

  Future<Uint8List> generateBarcodeImage(
    String data,
    BarcodeFormat format,
    SizeConfig sizeConfig,
  ) async {
    // Map your BarcodeFormat to the 'barcode' package type
    bcode.Barcode bc;
    switch (format) {
      case BarcodeFormat.code128:
        bc = bcode.Barcode.code128();
        break;
      case BarcodeFormat.code39:
        bc = bcode.Barcode.code39();
        break;
      case BarcodeFormat.ean13:
        bc = bcode.Barcode.ean13();
        break;
      case BarcodeFormat.ean8:
        bc = bcode.Barcode.ean8();
        break;
      case BarcodeFormat.upcA:
        bc = bcode.Barcode.upcA();
        break;
      case BarcodeFormat.upcE:
        bc = bcode.Barcode.upcE();
        break;
      case BarcodeFormat.itf:
        bc = bcode.Barcode.itf();
        break;
      case BarcodeFormat.pdf417:
        bc = bcode.Barcode.pdf417();
        break;
      case BarcodeFormat.aztec:
        bc = bcode.Barcode.aztec();
        break;

      case BarcodeFormat.code93:
        bc = bcode.Barcode.code93();
        break;
      case BarcodeFormat.codabar:
        bc = bcode.Barcode.codabar();
        break;
      case BarcodeFormat.dataMatrix:
        bc = bcode.Barcode.dataMatrix();
        break;
      default:
        bc = bcode.Barcode.code128();
    }

    final svg = bc.toSvg(data, width: sizeConfig.appWidth(80), height: sizeConfig.appHeight(15));

    return Uint8List.fromList(svg.codeUnits);
  }

  @override
  void dispose() {
    super.dispose();
  }
}
